package migrations

import (
	"time"
	"database/sql"
	"context"

	"github.com/krixano/ponixserver/src/db"
	"github.com/krixano/ponixserver/src/migration/types"
)

func init() {
	registerMigration(FilesTable{})
}

type FilesTable struct{}

func (m FilesTable) Version() types.MigrationVersion {
	return types.MigrationVersion(time.Date(2021, 5, 20, 22, 39, 43, 0, time.UTC))
}

func (m FilesTable) Name() string {
	return "FilesTable"
}

func (m FilesTable) DB() db.DBType {
	return db.MusicDB
}

func (m FilesTable) Description() string {
	return "Create the files table"
}

func (m FilesTable) Up(tx *sql.Tx) error {
	_, err := tx.ExecContext(context.Background(), `
	CREATE TABLE library (
		id integer generated by default as identity primary key,
		filehash character varying(240) NOT NULL,
		filename character varying(240) NOT NULL,
		mimetype character varying(255) NOT NULL,
		title character varying(255) NOT NULL,
		album character varying(255) NOT NULL,
		artist character varying(255) NOT NULL,
		albumartist character varying(255) NOT NULL,
		composer character varying(255) NOT NULL,
		genre character varying(255) NOT NULL,
		releaseyear integer NOT NULL,
		tracknumber integer NOT NULL,
		discnumber integer NOT NULL,
		uploadcount integer NOT NULL,
		date_added timestamp NOT NULL
	);`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE uploads (
		id integer generated by default as identity primary key,
		memberid integer references members,
		fileid integer references library,
		date_added timestamp NOT NULL
	);`)
	if err != nil {
		return err
	}

	return nil
}

func (m FilesTable) Down(tx *sql.Tx) error {
	panic("Dangerous")
	_, err := tx.ExecContext(context.Background(), `DROP TABLE uploads;`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `DROP TABLE library;`)
	if err != nil {
		return err
	}
	
	return nil
}
